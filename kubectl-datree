#!/bin/bash

# Check if Datree is installed
if ! command -v datree &> /dev/null; then
    printf "Datree is not installed on your machine, please run 'curl https://get.datree.io | /bin/bash' to install\n"
    printf "For more information, visit https://hub.datree.io/\n"
    exit 1
fi

show_help(){
    printf "Datree's kubectl plugin extends the tool's capabilities to allow scanning k8s yaml files within the cluster for misconfigurations.\n"
    printf "For more information and examples, see the official documentation: https://hub.datree.io\n"
    printf "\nUsage:\n"
    printf "  kubectl datree test [datree CLI args] -- [options]\n"
    printf "\nDatree CLI args:\n"
    printf "  This plugin supports all of the Datree CLI arguments: https://hub.datree.io/cli-arguments\n"
    printf "\nOptions:\n"
    printf "  [-n <namespace>] Test all resources in the cluster belonging to the specified namespace\n"
    printf "  [<resource type> <resource name> <namespace>] Test a single given resource in the cluster\n"
    printf "\nRunning 'kubectl datree test' with no arguments is equivalent to 'kubectl datree test -- -n default'\n"
}

PLUGIN_VERSION="v0.0.8"

# Validate argument
if [ "$1" == "version" ]; then
    echo "kubectl-datree plugin version: $PLUGIN_VERSION"
    exit 0
elif [ "$1" != "test" ]; then
    show_help
    exit 1
fi

# Get server k8s version and set it in env
SERVER_VERSION=$(kubectl version --short 2>/dev/null | grep "Server Version:")
SERVER_VERSION=${SERVER_VERSION:17:7}
SERVER_VERSION=${SERVER_VERSION%%-*}
export DATREE_SCHEMA_VERSION=$SERVER_VERSION

DATREE_OPTIONS=()
EOO=0
TEST_BY_NAMESPACE=1
NAMESPACE="default"
RESOURCE_KIND=""
RESOURCE_NAME=""

# Parse command line
while [[ $2 ]]; do
    if ! ((EOO)); then
        if [[ $2 == "--" ]]; then
            EOO=1
        else
            DATREE_OPTIONS+=("$2")
        fi

        shift
    else
        if [[ $2 == "-n" ]] || [[ $2 == "--namespace" ]]; then
            if [ ! -z "$3" ]; then
                NAMESPACE="$3"
            else
                echo "No namespace provided, using 'default' namespace"
            fi
        elif [ ! -z "$2" ]; then
            if [ ! -z "$3" ]; then
                TEST_BY_NAMESPACE=0
                RESOURCE_KIND="$2"
                RESOURCE_NAME="$3"
                if [ ! -z "$4" ]; then
                    NAMESPACE="$4"
                fi
            else
                echo "No resource name provided, exiting..."
            fi
        else
            echo "No resource type or name provided, exiting..."
        fi
        
        break
    fi
done

DST_DIR=""$HOME"/.datree/tmp"
mkdir -p $DST_DIR

get_yamls(){
    while read line
        do
            FILENAME="kubectl-${line%%/*}-${line##*/}.yaml"

            kubectl apply view-last-applied $line -n $NAMESPACE > $DST_DIR/$FILENAME
            if [ ! -s $DST_DIR/$FILENAME ]; then
                kubectl get $line -n $NAMESPACE -o yaml > $DST_DIR/$FILENAME &
            fi

            scanned_files+=("$line")
    done
}

get_common_resources(){
    while read line
        do
            # ignore system resources
            if [[ ${line##*/} == "kubernetes" ]]; then
                continue
            fi

            FILENAME="kubectl-${line%%/*}-${line##*/}.yaml"

            kubectl apply view-last-applied $line -n $NAMESPACE > $DST_DIR/$FILENAME
            if [ ! -s $DST_DIR/$FILENAME ]; then
                kubectl get $line -n $NAMESPACE -o yaml > $DST_DIR/$FILENAME &
            fi

            scanned_files+=("$line")
    done
}

additional_resources=("ingress")
get_additional_resources(){
    for str in ${additional_resources[@]}; do
        get_yamls < <(kubectl get $str -o name -n $NAMESPACE)
    done
}

DATREE_TEST_COMMAND="datree test "${DATREE_OPTIONS[@]}""

# List all scanned files to display at end of test
scanned_files=()
wereFilesScanned=0

# Test file/s
if ((TEST_BY_NAMESPACE)); then
    # Test all resources in a given namespace
    echo "Fetching resources, this may take some time depending on the amount of resources in your cluster..."
    
    get_common_resources < <(kubectl get all -n $NAMESPACE --selector='!pod-template-hash','!controller-revision-hash','!controller-uid' -o name)
    get_additional_resources
    wait

    if [ "$(ls -A $DST_DIR)" ]; then
        $DATREE_TEST_COMMAND $DST_DIR/*.yaml
        if [ "$?" != 1 ]; then
            wereFilesScanned=1
        fi
    else
        echo "Invalid namespace provided, exiting..."
    fi
else
    # Test a single file of a given resource type
    kubectl get $RESOURCE_KIND $RESOURCE_NAME -n $NAMESPACE -o yaml > $DST_DIR/"kubectl-$RESOURCE_KIND-$RESOURCE_NAME".yaml
    scanned_files+=("$(kubectl get $RESOURCE_KIND $RESOURCE_NAME -n $NAMESPACE -o name)")
    
    if [ -s $DST_DIR/"kubectl-$RESOURCE_KIND-$RESOURCE_NAME".yaml ]; then
        $DATREE_TEST_COMMAND $DST_DIR/"kubectl-$RESOURCE_KIND-$RESOURCE_NAME".yaml
        if [ "$?" != 1 ]; then
            wereFilesScanned=1
        fi
    fi
fi

if [ "$wereFilesScanned" != 0 ]; then
    printf "\nThe following cluster resources in namespace '$NAMESPACE' were checked:\n\n"
    for file in "${scanned_files[@]}"
    do
        echo "$file"
    done
    printf "\n"
fi

# Cleanup
rm -rf $DST_DIR
